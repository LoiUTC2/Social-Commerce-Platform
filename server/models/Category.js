const mongoose = require('mongoose');
const slugify = require('slugify');

const categorySchema = new mongoose.Schema({
    name: { type: String, required: true, trim: true },
    slug: { type: String, required: true, unique: true },
    description: { type: String, default: '' },

    // C·∫•u tr√∫c ph√¢n c·∫•p
    parent: { type: mongoose.Schema.Types.ObjectId, ref: 'Category', default: null },
    level: { type: Number, default: 1 },
    path: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Category' }], // ƒê∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß t·ª´ root ƒë·∫øn danh m·ª•c hi·ªán t·∫°i. nghƒ©a l√† n√≥ s·∫Ω t·ª± ƒë·ªông b·ªè parent v√†o m·∫£ng (th√™m v√†o sau m·∫£ng))(·ªü ƒë·∫ßu m·∫£ng l√† cha,·ªü sau l√† con) VD: Trang ch·ªß > ƒêi·ªán t·ª≠ > ƒêi·ªán tho·∫°i > iPhone, 

    // Th√¥ng tin hi·ªÉn th·ªã
    icon: { type: String, default: '' },
    image: { type: String, default: '' },
    color: { type: String, default: '#000000' },

    // Th√¥ng tin hi·ªáu su·∫•t
    productCount: { type: Number, default: 0 }, // S·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong danh m·ª•c
    shopCount: { type: Number, default: 0 }, // S·ªë shop c√≥ s·∫£n ph·∫©m trong danh m·ª•c

    // Tr·∫°ng th√°i v√† s·∫Øp x·∫øp
    isActive: { type: Boolean, default: true },
    isVisible: { type: Boolean, default: true },
    sortOrder: { type: Number, default: 0 },

    // Metadata v√† SEO
    metaTitle: { type: String },
    metaDescription: { type: String },
    keywords: [{ type: String }],

    createdBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    createdAt: { type: Date, default: Date.now },

    updatedBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    updatedAt: { type: Date, default: Date.now }
}, { timestamps: true });

// Middleware t·ª± ƒë·ªông t·∫°o slug, path v√† level
categorySchema.pre('validate', async function (next) {
    console.log('üöÄ === MIDDLEWARE CATEGORY B·∫ÆT ƒê·∫¶U ===');
    console.log('üìù T·∫°o m·ªõi:', this.isNew);
    console.log('üìù T√™n thay ƒë·ªïi:', this.isModified('name'));
    console.log('üìù Parent thay ƒë·ªïi:', this.isModified('parent'));
    console.log('üìù T√™n hi·ªán t·∫°i:', this.name);
    console.log('üìù Parent hi·ªán t·∫°i:', this.parent);

    try {
        // B∆Ø·ªöC 1: C·∫≠p nh·∫≠t path v√† level khi parent thay ƒë·ªïi ho·∫∑c t·∫°o m·ªõi
        if (this.isNew || this.isModified('parent')) {
            await this._updatePathAndLevel();
        }

        // B∆Ø·ªöC 2: T·∫°o slug khi name, parent thay ƒë·ªïi ho·∫∑c t·∫°o m·ªõi
        if (this.isNew || this.isModified('name') || this.isModified('parent')) {
            await this._generateSlug();
        }

        console.log('‚úÖ K·∫øt qu·∫£ cu·ªëi c√πng:');
        console.log('   - Slug:', this.slug);
        console.log('   - Level:', this.level);
        console.log('   - Path:', this.path);
        console.log('üèÅ === MIDDLEWARE CATEGORY K·∫æT TH√öC ===\n');

        next();
    } catch (error) {
        console.error('‚ùå L·ªói trong middleware:', error.message);
        return next(error);
    }
});

// Ph∆∞∆°ng th·ª©c c·∫≠p nh·∫≠t path v√† level
categorySchema.methods._updatePathAndLevel = async function () {
    console.log('üîÑ C·∫≠p nh·∫≠t path v√† level...');
    
    if (!this.parent) {
        // Danh m·ª•c g·ªëc
        this.path = [];
        this.level = 1;
        console.log('   - Danh m·ª•c g·ªëc: level = 1, path = []');
    } else {
        // Danh m·ª•c con
        const parentCategory = await this.constructor.findById(this.parent);
        
        if (!parentCategory) {
            throw new Error('Danh m·ª•c cha kh√¥ng t·ªìn t·∫°i');
        }

        // Ki·ªÉm tra kh√¥ng t·∫°o v√≤ng l·∫∑p (kh√¥ng th·ªÉ ch·ªçn ch√≠nh m√¨nh ho·∫∑c con ch√°u l√†m parent)
        if (this._id && (
            parentCategory._id.equals(this._id) || 
            parentCategory.path.includes(this._id)
        )) {
            throw new Error('Kh√¥ng th·ªÉ t·∫°o v√≤ng l·∫∑p trong c√¢y danh m·ª•c');
        }

        this.path = [...parentCategory.path, parentCategory._id];
        this.level = parentCategory.level + 1;
        
        console.log('   - Danh m·ª•c con:');
        console.log('     + Parent:', parentCategory.name);
        console.log('     + Level:', this.level);
        console.log('     + Path length:', this.path.length);
    }
};

// Ph∆∞∆°ng th·ª©c t·∫°o slug
categorySchema.methods._generateSlug = async function () {
    console.log('üè∑Ô∏è  T·∫°o slug...');
    
    // T·∫°o slug c∆° b·∫£n t·ª´ t√™n
    const baseSlug = slugify(this.name, {
        lower: true,
        strict: true,
        locale: 'vi', // H·ªó tr·ª£ ti·∫øng Vi·ªát
        remove: /[*+~.()'"!:@]/g // Lo·∫°i b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát
    });

    let slug = baseSlug;

    // T·∫°o slug c√≥ c·∫•u tr√∫c ph√¢n c·∫•p d·ªÖ hi·ªÉu
    if (this.parent && this.path.length > 0) {
        // L·∫•y th√¥ng tin c√°c danh m·ª•c cha ƒë·ªÉ t·∫°o slug c√≥ √Ω nghƒ©a
        const parentCategories = await this.constructor.find({
            _id: { $in: this.path }
        }).select('name slug');

        // T·∫°o m·∫£ng slug t·ª´ root ƒë·∫øn parent
        const pathSlugs = [];
        
        // S·∫Øp x·∫øp theo th·ª© t·ª± trong path
        for (const pathId of this.path) {
            const parentCat = parentCategories.find(cat => cat._id.equals(pathId));
            if (parentCat) {
                const parentSlug = slugify(parentCat.name, {
                    lower: true,
                    strict: true,
                    locale: 'vi'
                });
                pathSlugs.push(parentSlug);
            }
        }

        // T·∫°o slug v·ªõi c·∫•u tr√∫c: parent1-parent2-current
        // Ch·ªâ l·∫•y 3 c·∫•p cu·ªëi ƒë·ªÉ slug kh√¥ng qu√° d√†i
        const recentPaths = pathSlugs.slice(-2); // L·∫•y 2 c·∫•p g·∫ßn nh·∫•t
        if (recentPaths.length > 0) {
            slug = `${recentPaths.join('-')}-${baseSlug}`;
        }
    }

    // ƒê·∫£m b·∫£o slug kh√¥ng tr√πng l·∫∑p
    slug = await this._ensureUniqueSlug(slug);
    
    this.slug = slug;
    console.log('   - Slug ƒë∆∞·ª£c t·∫°o:', this.slug);
};

// Ph∆∞∆°ng th·ª©c ƒë·∫£m b·∫£o slug duy nh·∫•t
categorySchema.methods._ensureUniqueSlug = async function (proposedSlug) {
    let uniqueSlug = proposedSlug;
    let counter = 1;

    while (true) {
        const existingCategory = await this.constructor.findOne({
            slug: uniqueSlug,
            _id: { $ne: this._id } // Lo·∫°i tr·ª´ ch√≠nh n√≥ khi update
        });

        if (!existingCategory) {
            break; // Slug n√†y ch∆∞a t·ªìn t·∫°i
        }

        // Th√™m s·ªë v√†o cu·ªëi slug
        uniqueSlug = `${proposedSlug}-${counter}`;
        counter++;

        // Gi·ªõi h·∫°n ƒë·ªÉ tr√°nh v√≤ng l·∫∑p v√¥ t·∫≠n
        if (counter > 1000) {
            uniqueSlug = `${proposedSlug}-${Date.now()}`;
            break;
        }
    }

    if (uniqueSlug !== proposedSlug) {
        console.log('   - Slug ƒëi·ªÅu ch·ªânh do tr√πng l·∫∑p:', uniqueSlug);
    }

    return uniqueSlug;
};

// Ph∆∞∆°ng th·ª©c tƒ©nh ƒë·ªÉ l·∫•y breadcrumb
categorySchema.statics.getBreadcrumb = async function (categoryId) {
    const category = await this.findById(categoryId).populate({
        path: 'path',
        select: 'name slug'
    });

    if (!category) return [];

    const breadcrumb = category.path.map(cat => ({
        id: cat._id,
        name: cat.name,
        slug: cat.slug
    }));

    // Th√™m danh m·ª•c hi·ªán t·∫°i v√†o cu·ªëi
    breadcrumb.push({
        id: category._id,
        name: category.name,
        slug: category.slug
    });

    return breadcrumb;
};

// Ph∆∞∆°ng th·ª©c tƒ©nh ƒë·ªÉ l·∫•y t·∫•t c·∫£ danh m·ª•c con
categorySchema.statics.getAllChildren = async function (categoryId) {
    const children = await this.find({
        path: categoryId
    }).sort({ level: 1, sortOrder: 1 });

    return children;
};

// Middleware c·∫≠p nh·∫≠t c√°c danh m·ª•c con khi danh m·ª•c cha thay ƒë·ªïi
categorySchema.post('save', async function (doc) {
    if (this.isModified('name') || this.isModified('path')) {
        console.log('üîÑ C·∫≠p nh·∫≠t danh m·ª•c con...');
        
        // T√¨m t·∫•t c·∫£ danh m·ª•c con c√≥ ch·ª©a danh m·ª•c n√†y trong path
        const children = await this.constructor.find({
            path: doc._id
        });

        // C·∫≠p nh·∫≠t l·∫°i path v√† slug cho c√°c danh m·ª•c con
        for (const child of children) {
            child.markModified('parent'); // Trigger middleware
            await child.save();
        }
        
        console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t ${children.length} danh m·ª•c con`);
    }
});

// Ph∆∞∆°ng th·ª©c ki·ªÉm tra tr√πng l·∫∑p th√¥ng minh
categorySchema.statics.checkDuplicate = async function(name, parent = null, excludeId = null) {
    const query = { name };
    
    // Th√™m ƒëi·ªÅu ki·ªán parent
    if (parent) {
        query.parent = parent;
    } else {
        query.parent = null; // Danh m·ª•c g·ªëc
    }
    
    // Lo·∫°i tr·ª´ ID hi·ªán t·∫°i (khi update)
    if (excludeId) {
        query._id = { $ne: excludeId };
    }
    
    const existing = await this.findOne(query);
    
    if (existing) {
        let message = 'Danh m·ª•c ƒë√£ t·ªìn t·∫°i';
        if (parent) {
            message += ' trong c√πng danh m·ª•c cha';
        } else {
            message += ' ·ªü c·∫•p g·ªëc';
        }
        
        return { exists: true, message, category: existing };
    }
    
    return { exists: false };
};

// Ph∆∞∆°ng th·ª©c x√¢y d·ª±ng c√¢y danh m·ª•c
categorySchema.statics.buildCategoryTree = async function(options = {}) {
    const {
        includeInactive = false,
        maxLevel = null,
        parentId = null,
        sortBy = 'sortOrder'
    } = options;
    
    // X√¢y d·ª±ng query
    let query = {};
    if (!includeInactive) query.isActive = true;
    if (maxLevel) query.level = { $lte: maxLevel };
    if (parentId) query.parent = parentId;
    
    // X√¢y d·ª±ng sort
    let sort = {};
    switch (sortBy) {
        case 'name': sort = { level: 1, name: 1 }; break;
        case 'created': sort = { level: 1, createdAt: -1 }; break;
        default: sort = { level: 1, sortOrder: 1 };
    }
    
    const categories = await this.find(query).sort(sort).lean();
    
    // X√¢y d·ª±ng c√¢y
    const buildTree = (cats, parentId = null) => {
        return cats
            .filter(cat => 
                (parentId === null && !cat.parent) ||
                (cat.parent && cat.parent.toString() === parentId?.toString())
            )
            .map(cat => {
                const children = buildTree(cats, cat._id);
                return {
                    ...cat,
                    children,
                    hasChildren: children.length > 0,
                    childrenCount: children.length
                };
            });
    };
    
    return buildTree(categories);
};

// Ph∆∞∆°ng th·ª©c th·ªëng k√™ danh m·ª•c
categorySchema.statics.getCategoryStats = async function() {
    const stats = await this.aggregate([
        {
            $group: {
                _id: '$level',
                count: { $sum: 1 },
                activeCount: {
                    $sum: { $cond: ['$isActive', 1, 0] }
                },
                totalProducts: { $sum: '$productCount' },
                totalShops: { $sum: '$shopCount' }
            }
        },
        { $sort: { _id: 1 } }
    ]);
    
    const totalCategories = await this.countDocuments();
    const activeCategories = await this.countDocuments({ isActive: true });
    
    return {
        total: totalCategories,
        active: activeCategories,
        inactive: totalCategories - activeCategories,
        byLevel: stats,
        maxLevel: stats.length > 0 ? Math.max(...stats.map(s => s._id)) : 0
    };
};

// Ph∆∞∆°ng th·ª©c t√¨m ki·∫øm danh m·ª•c
categorySchema.statics.searchCategories = async function(searchTerm, options = {}) {
    const {
        level = null,
        isActive = true,
        limit = 20
    } = options;
    
    let query = {
        $or: [
            { name: new RegExp(searchTerm, 'i') },
            { description: new RegExp(searchTerm, 'i') },
            { slug: new RegExp(searchTerm, 'i') }
        ]
    };
    
    if (level) query.level = level;
    if (isActive !== null) query.isActive = isActive;
    
    const categories = await this.find(query)
        .limit(limit)
        .sort({ level: 1, sortOrder: 1 })
        .populate('parent', 'name slug')
        .lean();
    
    // Th√™m breadcrumb cho m·ªói k·∫øt qu·∫£
    const results = await Promise.all(
        categories.map(async (cat) => {
            const breadcrumb = await this.getBreadcrumb(cat._id);
            return { ...cat, breadcrumb };
        })
    );
    
    return results;
};

// Ph∆∞∆°ng th·ª©c ki·ªÉm tra c√≥ th·ªÉ x√≥a kh√¥ng
categorySchema.statics.canDelete = async function(categoryId) {
    const category = await this.findById(categoryId);
    if (!category) return { canDelete: false, reason: 'Danh m·ª•c kh√¥ng t·ªìn t·∫°i' };
    
    // Ki·ªÉm tra c√≥ danh m·ª•c con
    const childrenCount = await this.countDocuments({ path: categoryId });
    if (childrenCount > 0) {
        return { 
            canDelete: false, 
            reason: `C√≥ ${childrenCount} danh m·ª•c con` 
        };
    }
    
    // Ki·ªÉm tra c√≥ s·∫£n ph·∫©m
    if (category.productCount > 0) {
        return { 
            canDelete: false, 
            reason: `C√≥ ${category.productCount} s·∫£n ph·∫©m` 
        };
    }
    
    return { canDelete: true };
};

// Ph∆∞∆°ng th·ª©c di chuy·ªÉn danh m·ª•c
categorySchema.statics.moveCategory = async function(categoryId, newParentId = null) {
    const category = await this.findById(categoryId);
    if (!category) throw new Error('Danh m·ª•c kh√¥ng t·ªìn t·∫°i');
    
    // Ki·ªÉm tra parent m·ªõi (n·∫øu c√≥)
    if (newParentId) {
        const newParent = await this.findById(newParentId);
        if (!newParent) throw new Error('Danh m·ª•c cha m·ªõi kh√¥ng t·ªìn t·∫°i');
        
        // Ki·ªÉm tra kh√¥ng t·∫°o v√≤ng l·∫∑p
        if (newParent.path.includes(categoryId)) {
            throw new Error('Kh√¥ng th·ªÉ di chuy·ªÉn v√†o danh m·ª•c con c·ªßa ch√≠nh n√≥');
        }
    }
    
    // C·∫≠p nh·∫≠t parent
    category.parent = newParentId;
    await category.save(); // Middleware s·∫Ω t·ª± ƒë·ªông c·∫≠p nh·∫≠t path, level, slug
    
    return category;
};

// Indexes ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t
categorySchema.index({ slug: 1 });
categorySchema.index({ name: 'text' });
categorySchema.index({ parent: 1 });
categorySchema.index({ path: 1 });
categorySchema.index({ level: 1 });
categorySchema.index({ isActive: 1, isVisible: 1 });
categorySchema.index({ sortOrder: 1 });

module.exports = mongoose.model('Category', categorySchema);