const express = require('express');
const router = express.Router();
const searchController = require('../controllers/searchController');
const { verifyToken, setActor } = require('../middleware/authMiddleware');
const { trackSearch, ensureSessionId, trackTiming } = require('../middleware/interactionMiddleware');

// Debug middleware ƒë·ªÉ log requests
const debugMiddleware = (req, res, next) => {
    console.log(`üîç Search request: ${req.method} ${req.path}`);
    console.log(`üîç Query params:`, req.query);
    console.log(`üîç Session ID:`, req.sessionId);
    next();
};

// Middleware √°p d·ª•ng cho t·∫•t c·∫£ routes
router.use(debugMiddleware); // Debug logging
router.use(ensureSessionId); // ƒê·∫£m b·∫£o c√≥ sessionId
router.use(trackTiming); // Track th·ªùi gian response (optional)
router.use(verifyToken); // Verify JWT token (cho ph√©p null)
router.use(setActor); // Set actor info

// T√¨m ki·∫øm t·ªïng h·ª£p (t·∫•t c·∫£ lo·∫°i) - S·ª¨ D·ª§NG trackSearch middleware
router.get('/all', trackSearch, searchController.searchAll);

// T√¨m ki·∫øm s·∫£n ph·∫©m - S·ª¨ D·ª§NG trackSearch middleware
router.get('/products', trackSearch, searchController.searchProducts);

// T√¨m ki·∫øm shop - S·ª¨ D·ª§NG trackSearch middleware
router.get('/shops', trackSearch, searchController.searchShops);

// T√¨m ki·∫øm ng∆∞·ªùi d√πng - S·ª¨ D·ª§NG trackSearch middleware
router.get('/users', trackSearch, searchController.searchUsers);

// T√¨m ki·∫øm b√†i vi·∫øt - S·ª¨ D·ª§NG trackSearch middleware
router.get('/posts', trackSearch, searchController.searchPosts);

//T√¨m ki·∫øm theo Hashtag
router.get('/hashtag', trackSearch, searchController.searchByHashtag);

//T√¨m ki·∫øm theo Category
router.get('/category', trackSearch, searchController.searchByCategory);

// L·∫•y t·ª´ kh√≥a t√¨m ki·∫øm ph·ªï bi·∫øn (kh√¥ng c·∫ßn track v√¨ kh√¥ng ph·∫£i search)
router.get('/popular', searchController.getPopularSearches);

// G·ª£i √Ω t√¨m ki·∫øm (kh√¥ng c·∫ßn track v√¨ ch·ªâ l√† g·ª£i √Ω, kh√¥ng ph·∫£i search th·ª±c s·ª±)
router.get('/suggestions', searchController.searchSuggestions);

module.exports = router;