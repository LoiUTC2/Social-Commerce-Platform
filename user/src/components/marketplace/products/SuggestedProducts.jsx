"use client"

import { Button } from "../../../components/ui/button"
import { ArrowRight, Sparkles, AlertCircle, Loader2, Brain, RefreshCw } from "lucide-react"
import { Alert, AlertDescription } from "../../../components/ui/alert"
import ProductCard from "../ProductCard"
import { useSuggestedProducts } from "../../../hooks/useProducts"
import { useState } from "react"

const SuggestedProducts = ({ method = "hybrid", limit = 12 }) => {
    const { products, loading, error, pagination, metadata, retry } = useSuggestedProducts(limit, method)
    const [retryCount, setRetryCount] = useState(0)

    const handleViewAll = () => {
        // Navigate to suggested products page
        window.location.href = "/marketplace/suggested-products"
    }

    const handleRetry = () => {
        setRetryCount((prev) => prev + 1)
        retry()
    }

    if (error) {
        return (
            <section className="w-full py-8 bg-white">
                <div className="container mx-auto px-4">
                    <Alert className="border-red-200 bg-red-50">
                        <AlertCircle className="h-4 w-4 text-red-600" />
                        <AlertDescription className="text-red-800">{error}</AlertDescription>
                    </Alert>
                </div>
            </section>
        )
    }

    return (
        <section className="w-full py-8 bg-white">
            <div className="container mx-auto px-4">
                {/* Header Section */}
                <div className="flex items-center justify-between mb-6">
                    <div className="flex items-center gap-3">
                        <div className="flex items-center justify-center w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full">
                            <Sparkles className="w-5 h-5 text-white" />
                        </div>
                        <div>
                            <h2 className="text-2xl font-bold text-gray-900">üí° G·ª£i √Ω cho b·∫°n</h2>
                            <p className="text-sm text-gray-600 mt-1">
                                {loading
                                    ? "ƒêang ph√¢n t√≠ch s·ªü th√≠ch..."
                                    : metadata?.method === "fallback"
                                        ? "S·∫£n ph·∫©m ph·ªï bi·∫øn d√†nh cho b·∫°n"
                                        : `D√†nh ri√™ng cho s·ªü th√≠ch c·ªßa b·∫°n (${metadata?.method || "AI"})`}
                            </p>
                            {metadata?.aiRecommendationsCount > 0 && (
                                <div className="flex items-center gap-1 mt-1">
                                    <Brain className="w-3 h-3 text-purple-500" />
                                    <span className="text-xs text-purple-600">
                                        AI ƒë√£ ph√¢n t√≠ch {metadata.aiRecommendationsCount} g·ª£i √Ω
                                    </span>
                                </div>
                            )}
                        </div>
                    </div>

                    <Button
                        variant="outline"
                        className="group border-purple-200 text-purple-600 hover:bg-purple-500 hover:text-white hover:border-purple-500 transition-all duration-300"
                        onClick={handleViewAll}
                        disabled={loading}
                    >
                        Xem t·∫•t c·∫£
                        <ArrowRight className="w-4 h-4 ml-2 group-hover:translate-x-1 transition-transform" />
                    </Button>
                </div>

                {/* Loading State v·ªõi option cancel/retry */}
                {loading && (
                    <div className="flex flex-col items-center justify-center py-12">
                        <div className="flex items-center gap-3 text-purple-600 mb-4">
                            <Loader2 className="w-6 h-6 animate-spin" />
                            <span className="text-lg font-medium">AI ƒëang ph√¢n t√≠ch s·ªü th√≠ch c·ªßa b·∫°n...</span>
                        </div>

                        {/* Hi·ªÉn th·ªã n√∫t retry n·∫øu loading qu√° l√¢u */}
                        <div className="text-center">
                            <p className="text-sm text-gray-500 mb-3">Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t v√†i gi√¢y...</p>
                            <Button
                                variant="outline"
                                size="sm"
                                onClick={handleRetry}
                                className="border-purple-200 text-purple-600 hover:bg-purple-50"
                            >
                                <RefreshCw className="w-4 h-4 mr-2" />
                                T·∫£i l·∫°i n·∫øu qu√° l√¢u
                            </Button>
                        </div>
                    </div>
                )}

                {/* Products Grid */}
                {!loading && products.length > 0 && (
                    <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4">
                        {products.map((product) => (
                            <ProductCard key={product._id} product={product} showAIScore={metadata?.method !== "fallback"} />
                        ))}
                    </div>
                )}

                {/* Empty State v·ªõi n√∫t retry */}
                {!loading && products.length === 0 && (
                    <div className="text-center py-12">
                        <div className="w-16 h-16 mx-auto mb-4 bg-gray-100 rounded-full flex items-center justify-center">
                            <Sparkles className="w-8 h-8 text-gray-400" />
                        </div>
                        <h3 className="text-lg font-medium text-gray-900 mb-2">
                            {error ? "Kh√¥ng th·ªÉ t·∫£i g·ª£i √Ω" : "Ch∆∞a c√≥ g·ª£i √Ω ph√π h·ª£p"}
                        </h3>
                        <p className="text-gray-600 mb-4">
                            {error
                                ? "C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i."
                                : "H√£y t∆∞∆°ng t√°c v·ªõi c√°c s·∫£n ph·∫©m ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c g·ª£i √Ω t·ªët h∆°n!"}
                        </p>

                        {/* N√∫t retry */}
                        <div className="flex justify-center gap-3">
                            <Button
                                onClick={handleRetry}
                                className="bg-purple-500 hover:bg-purple-600 text-white px-6 py-2 rounded-full flex items-center gap-2 transition-all duration-300"
                                disabled={loading}
                            >
                                <RefreshCw className={`w-4 h-4 ${loading ? "animate-spin" : ""}`} />
                                {loading ? "ƒêang t·∫£i..." : "T·∫£i l·∫°i"}
                            </Button>

                            <Button
                                variant="outline"
                                onClick={() => (window.location.href = "/marketplace/products")}
                                className="border-purple-200 text-purple-600 hover:bg-purple-50 px-6 py-2 rounded-full"
                            >
                                Xem t·∫•t c·∫£ s·∫£n ph·∫©m
                            </Button>
                        </div>

                        {retryCount > 0 && <p className="text-xs text-gray-500 mt-2">ƒê√£ th·ª≠ l·∫°i {retryCount} l·∫ßn</p>}
                    </div>
                )}

                {/* View More Button */}
                {!loading && products.length > 0 && (
                    <div className="flex justify-center mt-8">
                        <Button
                            size="lg"
                            className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white px-8 py-3 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105"
                            onClick={handleViewAll}
                        >
                            Kh√°m ph√° th√™m g·ª£i √Ω
                            <ArrowRight className="w-5 h-5 ml-2" />
                        </Button>
                    </div>
                )}

                {/* Pagination Info */}
                {pagination && pagination.total > 0 && (
                    <div className="text-center mt-4 text-sm text-gray-500">
                        Hi·ªÉn th·ªã {products.length} trong t·ªïng s·ªë {pagination.total} g·ª£i √Ω
                    </div>
                )}
            </div>
        </section>
    )
}

export default SuggestedProducts
