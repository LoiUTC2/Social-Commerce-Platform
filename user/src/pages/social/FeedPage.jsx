import React, { useState, useEffect, useRef, useCallback } from 'react';
import LeftSidebar from '../../components/layout/LeftSidebar';
import RightSidebar from '../../components/layout/RightSidebar';
import FeedItem from '../../components/feed/FeedItem';
import { Button } from '../../components/ui/button';
import StoryBar from '../../components/feed/StoryBar';
import CreatePost from '../../components/feed/CreatePost';
import { getAllPosts } from '../../services/postService'; // ‚úÖ

const FeedPage = ({ showTabs = false }) => {
  const [tab, setTab] = useState('popular');
  const [posts, setPosts] = useState([]);
  const [page, setPage] = useState(1);
  const [hasMore, setHasMore] = useState(true);
  const [isLoading, setIsLoading] = useState(false);

  const isInitialFetchDone = useRef(false); // Quan tr·ªçng: S·ª≠ d·ª•ng ref thay v√¨ state ƒë·ªÉ theo d√µi API ƒë√£ g·ªçi ch∆∞a

  const observerRef = useRef();

  const sidebarStickyTop = showTabs ? 'top-[160px]' : 'top-[112px]';   // T√≠nh to√°n top sidebar ph√π h·ª£p n·∫øu c√≥ tab ph·ª•

  // T√°ch ri√™ng h√†m t·∫£i d·ªØ li·ªáu ƒë·∫ßu ti√™n v√† t·∫£i th√™m
  const fetchInitialPosts = useCallback(async () => {
    if (isInitialFetchDone.current || isLoading) return;
    
    setIsLoading(true);
    try {
      const res = await getAllPosts(1, 5);
      if (res.data.length > 0) {
        setPosts(res.data);
        setPage(2); // ƒê·∫∑t trang ti·∫øp theo l√† 2
        setHasMore(res.hasMore);
      } else {
        setHasMore(false);
      }
      isInitialFetchDone.current = true;
      console.log("Danh s√°ch b√†i vi·∫øt: ", res.data)

    } catch (err) {
      console.error('L·ªói t·∫£i b√†i vi·∫øt:', err);
    } finally {
      setIsLoading(false);
    }
  }, [isLoading]);

  //g·ªçi API b√†i vi·∫øt
  const loadMorePosts = useCallback(async () => {
    if (isLoading || !hasMore) return;
    setIsLoading(true);
    try {
      const res = await getAllPosts(page, 5);
      if (res.data.length > 0) {
        setPosts((prev) => [...prev, ...res.data]);
        setPage((prevPage) => prevPage + 1);
        setHasMore(res.hasMore); // s·ª≠ d·ª•ng hasMore t·ª´ backend

      } else {
        setHasMore(false);
      }
    } catch (err) {
      console.error('L·ªói t·∫£i th√™m b√†i vi·∫øt:', err);
    } finally {
      setIsLoading(false);
    }
  }, [isLoading, hasMore, page]);

  // Ch·ªâ t·∫£i d·ªØ li·ªáu ban ƒë·∫ßu m·ªôt l·∫ßn khi component mount
  useEffect(() => {
    fetchInitialPosts();
  }, [fetchInitialPosts]);

  // Infinite scroll v·ªõi ƒëi·ªÅu ki·ªán ch·ªâ k√≠ch ho·∫°t sau khi ƒë√£ t·∫£i d·ªØ li·ªáu ƒë·∫ßu ti√™n
  const lastPostRef = useCallback((node) => {
    if (isLoading || !hasMore || !node || !isInitialFetchDone.current) return;

    if (observerRef.current) observerRef.current.disconnect();

    observerRef.current = new IntersectionObserver((entries) => {
      if (entries[0].isIntersecting) {
        loadMorePosts(); // kh√¥ng c·∫ßn truy·ªÅn page, ƒë√£ l·∫•y t·ª´ state
      }
    });
    observerRef.current.observe(node);
  }, [hasMore, isLoading, loadMorePosts]);

  // useEffect(() => {
  //   const fetchPosts = async () => {
  //     try {
  //       const res = await getAllPosts(); // g·ªçi API
  //       setPosts(res.data); // ho·∫∑c res.posts n·∫øu backend tr·∫£ v·ªÅ nh∆∞ v·∫≠y
  //     } catch (err) {
  //       console.error('L·ªói t·∫£i b√†i vi·∫øt:', err);
  //     }
  //   };

  //   fetchPosts();
  // }, []);
  return (
    <div className="bg-gray-100 min-h-screen">
      {/* Tabs ph·ª• d·∫°ng sticky n·∫øu showTabs */}
      {showTabs && (
        <div className="sticky top-[64px] z-40 bg-white border-b shadow-sm">
          <div className="flex justify-center space-x-4 px-4 py-2">
            <Button
              variant={tab === 'popular' ? 'default' : 'outline'}
              onClick={() => setTab('popular')}
            >
              Ph·ªï bi·∫øn
            </Button>
            <Button
              variant={tab === 'foryou' ? 'default' : 'outline'}
              onClick={() => setTab('foryou')}
            >
              D√†nh cho b·∫°n
            </Button>
            <Button
              variant={tab === 'friends' ? 'default' : 'outline'}
              onClick={() => setTab('friends')}
            >
              B·∫°n b√®
            </Button>
            <Button
              variant={tab === 'following' ? 'default' : 'outline'}
              onClick={() => setTab('following')}
            >
              Theo d√µi
            </Button>
          </div>
        </div>
      )}

      {/* Wrapper gi·ªëng HomePage */}
      <div className="px-4 max-w-[1600px] mx-auto pt-2">
        <div className="flex gap-6">
          {/* Left Sidebar */}
          <aside className={`w-[22%] hidden xl:block sticky top-[112px] h-fit self-start`}>
            <LeftSidebar />
          </aside>

          {/* Feed content */}
          <main className="flex-1 space-y-4">
            <CreatePost />
            <StoryBar />

            {posts.map((post, index) => {
              const isLast = index === posts.length - 1;
              return (
                <div ref={isLast ? lastPostRef : null} key={post._id}>
                  <FeedItem post={post} />
                </div>
              );
            })}
            {isLoading && <p className="text-center text-sm text-gray-500">ƒêang t·∫£i th√™m b√†i vi·∫øt...</p>}
            {!hasMore && <p className="text-center text-gray-400 text-sm py-4">B·∫°n ƒë√£ xem h·∫øt b√†i vi·∫øt üéâ</p>}
          </main>

          {/* Right Sidebar */}
          <aside className={`w-[25%] hidden 2xl:block sticky top-[112px] h-fit self-start`}>
            <RightSidebar />
          </aside>
        </div>
      </div>
    </div>
  );
};

export default FeedPage;
